Правила оформления исходного кода нужно оформлять в следующим виде:
1. Именование Классов:
	1.1 Для названий любых элементов программного кода следует использовать английские символы и слова.
	1.2 Для названий любых элементов программного кода следует использовать содержательные имена, позволяющие сделать вывод о назначении данных элементов.
	1.3 При использовании в названиях классов нескольких слов использовать UpperCamelCase.

2. Именование переменных/данных(поле) класса:
	2.1 Имя должно не только идентифицировать объекты данных или функции в программе, но и содержать в себе краткое описание смысла и назначения сущности. 
	2.2 При использовании в названиях переменных/данных(поле) классов нескольких слов использовать lowerCamelCase.
	2.3 Именованные константы записываются в верхнем регистре с нижним подчёркиванием в качестве разделителя.
	2.4 Переменные, имеющие большую область видимости, рекомендуется называть длинными содержательными именами; имеющие небольшую область видимости – короткими.
	2.5 Зарезервированные слова или стандартные имена набираются в нижнем регистре.

3. Именование свойств класса:
	3.1 Названия свойств классов не должны быть равны названиям переменных, которые используются в данном классе.
	3.2 При использовании в названиях свойств классов нескольких слов использовать UpperCamelCase.

4. Именование функций/методов класса:
	4.1 Имена методов класса или функций, которые возвращают значения, должны иметь свой унифицированный префикс "get", например, "getStatus".
	4.2 Имена методов класса, функций или процедур, которые устанавливают значения, должны иметь свой унифицированный префикс "set", например, "setStatus".
	4.3 Использовать префикс "is" для методов, возвращающих булево значение.
	4.4 Использовать префикс "initialize" для методов, инициализирующих  сущность;
	4.5 Использовать префикс "run", "compute" для методов, запускающих процесс.

5. Расстановка блоков:
	5.1 Вложенные конструкции оформляются с помощью отступов (принцип "лесенки").
	5.2 Каждая конструкция (описание переменных, констант; все заголовки (функций, методов, классов); операторы; операции присваивания; вызовы функций и методов;) должна находиться/начинаться в отдельной строке.
	5.3  Условный оператор оформляется следующим образом:
	//полный вариант
	if (условие) {
 		операторы;
	}
	else{
		операторы;
	}
	// сокращенный вариант
	if (условие) {
		операторы;
	}
	// допустимый вариант
	if (условие)
	{
		операторы;
	}
	else
	{
		операторы;
	}
	5.4 Если во вложенном блоке кода размещается только один оператор, то фигурные скобки допускается не писать.
	5.5 Цикл for оформляется следующим образом:
	for (инициализация; условие; модификация) {
 		операторы;
	}
	5.6 Цикл while оформляется следующим образом:
	while (условие) {
 		операторы;
	}
	5.7 Цикл do-while оформляется следующим образом:
	do {
		операторы;
	} while (условие);
	5.8 Оператор выбора switch оформляется следующим образом:
	switch (условие) {
		case значение1 :
			операторы;
			break;

		case значение2 :
		case значение3 :
			операторы;
			break;

		default :
			операторы;
	}
	5.9  Оператор try-catch оформляется следующим образом:
	try {
		операторы;
	}
	catch (ТипИсключения исключение) {
		операторы;
	}
	5.10 Определение функций и методов оформляется следующим образом:
	ТипЗначения nameFunction(параметры)
	{
		операторы;
	}
	5.11 Использование пробелов в выражениях и операторах. Следует отбивать пробелами с двух сторон бинарные операции, двоеточия. Пробел ставится после запятой, точки с запятой, зарезервированных слов.
	5.12 Фрагменты кода, решающие отдельные подзадачи, рекомендуется разделять пустой строкой.
	5.13 Переменные следует объявлять в как можно меньшей области видимости (принцип локализации).
	5.14 Следует избегать глобальных переменных.
	5.15 Если один и тот же код повторяется два или более раза, то его следует выделить в функцию (класс).

6. Оформление арифметических выражений:
	6.1 Каждое выражение должно находиться в отдельной строке.
	6.2 Каждая арифметическая операция разделяется с двух сторон пробелами.

7. Оформление комментариев: (комментарии перед функциями)
	7.1 Для поясняющего комментария используют две наклонные черты //, после которых обязательно должен следовать пробел.
	7.2 Обозначения /* и */ обычно применяются для временного отключения фрагментов кода при его отладке.
	7.3 Комментарии блоков кода, спецификации классов, методов и функций размещают перед самим кодом, то есть в строках выше него. 
	7.4 Для отдельного оператора допускается размещение комментария справа от него, если только такой комментарий не слишком велик.
	7.5 Комментарии располагают так, чтобы было понятно, какой именно блок кода они описывают;
	7.6 Все комментарии пишутся на русском языке. В комментариях не допускается использование ненормативной, оскорбительной или дискриминационной лексики, а также слов, не относящихся к техническому или деловому лексикону.
	7.7 В комментариях не допускается наличие информации, не несущей смысловую нагрузку к пояснению сути алгоритма программного кода.
	7.8 Если для языка программирования применяется система контроля версий, то комментарии вида: дата создания; дата модификации; автор создания; автор модификации - допускается вести в ней.